.QWidget {
   background-color: rgb(0, 0, 0);
 }

.QWidget#FormPasswordDialog {
     background-color: rgba(150, 150, 150, 250);
     border: 2px solid rgb(255, 255, 255);
     border-radius: 7px;
}


/* Nice Windows-XP-style password character. */
/*QLineEdit[echoMode="2"] {
    lineedit-password-character: 9679;
}*/

/* We provide a min-width and min-height for push buttons
   so that they look elegant regardless of the width of the text. */
QPushButton, QToolButton {
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(130, 130, 130), stop: 1 rgb(70, 70, 70));
    color: rgb(255, 255, 255);
    border-width: 1px;
    border-color: rgb(70, 70, 70);
    border-style: solid;
    border-radius: 3;
    padding: 3px;
    min-width: 9ex;
    /*min-height: 2.9ex;*/
}

QPushButton {
    border: 1px solid rgb(80, 80, 80);
    border-radius: 2px;
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                           stop: 0 rgb(200, 200, 200), stop: 0.5 rgb(60, 60, 60),
                                           stop: 0.51 rgb(30, 30, 30), stop: 1 rgb(60, 60, 60));
}

QPushButton:hover, QToolButton:hover  {
    border: 1px solid rgb(80, 80, 80);
    border-radius: 2px;
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                       stop: 0 rgb(150, 150, 150), stop: 0.5 rgb(90, 90, 90),
                                       stop: 0.51 rgb(30, 30, 30), stop: 1 rgb(150, 150, 150));
}

QPushButton:disabled, QToolButton:disabled  {
   background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(90, 90, 90), stop: 1 rgb(30, 30, 30));
   color: rgb(140, 140, 140)
}

/* Increase the padding, so the text is shifted when the button is
   pressed. */
QPushButton:pressed, QToolButton:pressed {
    padding-left: 5px;
    padding-top: 5px;
    border: 1px solid rgb(80, 80, 80);
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                           stop: 0 rgb(60, 60, 60), stop: 1 rgb(150, 150, 150));
}

QLabel, QAbstractButton {
    font: bold;
    color: rgb(255, 255, 255);
}

QLabel[statusbar="true"] {
    font: bold;
    color: rgb(0, 0, 0);
}

/* Bold text on status bar looks awful. */
QStatusBar QLabel {
   font: normal;
}

QStatusBar::item {
    border-width: 1;
    border-color: darkkhaki;
    border-style: solid;
    border-radius: 2;
}

QComboBox, QLineEdit, QSpinBox, QTextEdit, QListView, QTableView {
    background-color: rgb(50, 50, 50);
    selection-color: rgb(30, 30, 30);
    selection-background-color: rgb(200, 200, 200);
    color: rgb(255, 255, 255);
    font: bold;
}

QGroupBox {
    border: 2px solid rgb(230, 230, 230);
    border-radius: 6px;
}

QComboBox {
    border-radius: 3;
    border: 0.5px solid rgb(230, 230, 230);
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 rgb(200, 200, 200), stop: 0.4 #D8D8D8,
                                 stop: 0.5 rgb(90, 90, 90), stop: 1.0 #E1E1E1);
    color:white;
}

QComboBox:editable {
     background-color: gray;
     color: white;
}
/*если список раскрыт*/
 QComboBox:!editable:on, QComboBox::drop-down:editable:on {
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 rgb(220, 220, 220), stop: 0.4 rgb(190, 190, 190),
                                 stop: 0.5 rgb(90, 90, 90), stop: 1.0 #E1E1E1);
    color: white;
}

/*элемент combobox*/
QComboBox QAbstractItemView {
     border: 2px solid darkgray;
     background-color: rgb(170, 170, 170);
     selection-background-color: rgb(120, 120, 120);
}

QListView {
    show-decoration-selected: 1;
}

QListView::item:hover {
    background-color: wheat;
}

QTableView {
    font: normal;
    font-weight: 600;
    border-width: none;
}

QTableView::item {
    background-color: rgb(70, 70, 70);
    color: rgb(220, 220, 220);
    height: 15px;
}

QTableView::item[is_archive="true"]
{
    background-color: rgb(190, 70, 70);
    color: rgb(255, 0, 0);
    height: 15px;
}

QTableView::item::selected {
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(250, 250, 250), stop: 1 rgb(110, 110, 110));
    color: rgb(40, 40, 40);
    border-width: none;
}

QHeaderView {
    background-color: rgb(100, 100, 100);
    font: bold;
}

QHeaderView::section {
    /*background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(140, 140, 140), stop: 1 rgb(70, 70, 70));*/
background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 rgb(220, 220, 220), stop: 0.4 rgb(140, 140, 140),
                                 stop: 0.5 rgb(70, 70, 70), stop: 1.0 rgb(140, 140, 140));
    color: rgb(255, 255, 255);
    border-width: none;
    border: 0.5px solid rgb(200, 200, 200);
    padding: 0;
    min-height: 22px;
}

QHeaderView::section::hover {
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                              stop: 0 rgb(180, 180, 180), stop: 0.4 rgb(100, 100, 100),
                              stop: 0.5 rgb(30, 30, 30), stop: 1.0 rgb(100, 100, 100));
    color: rgb(255, 255, 255);
}

QHeaderView::section::pressed {
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                              stop: 0 rgb(30, 30, 30), stop: 0.4 rgb(100, 100, 100),
                              stop: 0.5 rgb(150, 150, 150), stop: 1.0 rgb(100, 100, 100));

    color: rgb(255, 255, 255);
}

QProgressBar {
     border: 1px solid rgb(200, 200, 200);
     background-color: rgb(50, 50, 50);
     border-radius: 2px;
     text-align: center;
}

QProgressBar::chunk {
    background-color: rgb(220, 220, 220);
}

/* We reserve 1 pixel space in padding. When we get the focus,
   we kill the padding and enlarge the border. This makes the items
   glow. */
QLineEdit, QFrame {
    border-width: 2px;
    padding: 1px;
    border-color: rgb(50, 50, 50);
    border-radius: 3px;
}

QLineEdit {
    min-height: 21px;
}

/* As mentioned above, eliminate the padding and increase the border. */
QLineEdit:focus, QFrame:focus {
    border-width: 3px;
    padding: 0px;
}

QLineEdit:hover, QLineEdit:focus {
    border-width: 2px;
    border: 2px solid rgb(110, 110, 110);
}

/* A QLabel is a QFrame ... */
QLabel {
    border: none;
    padding: 0;
    background: none;
}

/* A QToolTip is a QLabel ... */
QToolTip {
    border: 2px solid darkkhaki;
    padding: 5px;
    border-radius: 3px;
    opacity: 200;
}

/*QCheckBox::indicator{
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(110, 110, 110), stop: 1 rgb(70, 70, 70));
    color: rgb(255, 255, 255);
}
QCheckBox::indicator::checked{
    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 rgb(110, 110, 110), stop: 1 rgb(70, 70, 70));
    color: rgb(255, 255, 255);
}*/


/* Nice to have the background color change when hovered. */
/*QRadioButton:hover, QCheckBox:hover {
    background-color: wheat;
}*/

/* Force the dialog's buttons to follow the Windows guidelines. */
QDialogButtonBox {
    button-layout: 0;
}

FileSystemRemoteDialog QLabel {
    color: rgb(0, 0, 0);
}

QMessageBox QLabel {
   color: rgb(0, 0, 0);
}



