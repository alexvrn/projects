// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remoteclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remoteclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uploadercontrol {

namespace {

const ::google::protobuf::Descriptor* ClientRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_Authorization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_Authorization_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_AddTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_AddTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_AddTask_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_AddTask_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_Maintaince_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_Maintaince_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRequest_OpenItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRequest_OpenItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientRequest_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_Authorization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_Authorization_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_FileStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_FileStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_FileStatus_FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_FileStatus_FileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_CopyingStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_CopyingStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_MaintenanceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_MaintenanceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_FileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_FileList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceResponse_FileList_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceResponse_FileList_Item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceResponse_MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InfoType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_remoteclient_2eproto() {
  protobuf_AddDesc_remoteclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remoteclient.proto");
  GOOGLE_CHECK(file != NULL);
  ClientRequest_descriptor_ = file->message_type(0);
  static const int ClientRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, addtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, maintaince_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, openitem_),
  };
  ClientRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_descriptor_,
      ClientRequest::default_instance_,
      ClientRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest));
  ClientRequest_Authorization_descriptor_ = ClientRequest_descriptor_->nested_type(0);
  static const int ClientRequest_Authorization_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, passwordhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, terminateuser_),
  };
  ClientRequest_Authorization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_Authorization_descriptor_,
      ClientRequest_Authorization::default_instance_,
      ClientRequest_Authorization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Authorization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_Authorization));
  ClientRequest_AddTask_descriptor_ = ClientRequest_descriptor_->nested_type(1);
  static const int ClientRequest_AddTask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, taskname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, docopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, removesourcefiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, index_),
  };
  ClientRequest_AddTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_AddTask_descriptor_,
      ClientRequest_AddTask::default_instance_,
      ClientRequest_AddTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_AddTask));
  ClientRequest_AddTask_File_descriptor_ = ClientRequest_AddTask_descriptor_->nested_type(0);
  static const int ClientRequest_AddTask_File_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask_File, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask_File, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask_File, isbackup_),
  };
  ClientRequest_AddTask_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_AddTask_File_descriptor_,
      ClientRequest_AddTask_File::default_instance_,
      ClientRequest_AddTask_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_AddTask_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_AddTask_File));
  ClientRequest_Command_descriptor_ = ClientRequest_descriptor_->nested_type(2);
  static const int ClientRequest_Command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Command, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Command, isbackup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Command, commandtype_),
  };
  ClientRequest_Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_Command_descriptor_,
      ClientRequest_Command::default_instance_,
      ClientRequest_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_Command));
  ClientRequest_Maintaince_descriptor_ = ClientRequest_descriptor_->nested_type(3);
  static const int ClientRequest_Maintaince_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Maintaince, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Maintaince, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Maintaince, removesourcefiles_),
  };
  ClientRequest_Maintaince_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_Maintaince_descriptor_,
      ClientRequest_Maintaince::default_instance_,
      ClientRequest_Maintaince_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Maintaince, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_Maintaince, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_Maintaince));
  ClientRequest_OpenItem_descriptor_ = ClientRequest_descriptor_->nested_type(4);
  static const int ClientRequest_OpenItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_OpenItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_OpenItem, listrecursively_),
  };
  ClientRequest_OpenItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRequest_OpenItem_descriptor_,
      ClientRequest_OpenItem::default_instance_,
      ClientRequest_OpenItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_OpenItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRequest_OpenItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRequest_OpenItem));
  ClientRequest_MessageType_descriptor_ = ClientRequest_descriptor_->enum_type(0);
  ServiceResponse_descriptor_ = file->message_type(1);
  static const int ServiceResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, authorization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, filestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, copyingstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, maintenancestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, filelist_),
  };
  ServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_descriptor_,
      ServiceResponse::default_instance_,
      ServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse));
  ServiceResponse_Authorization_descriptor_ = ServiceResponse_descriptor_->nested_type(0);
  static const int ServiceResponse_Authorization_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Authorization, isok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Authorization, isadmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Authorization, alreadyauthorized_),
  };
  ServiceResponse_Authorization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_Authorization_descriptor_,
      ServiceResponse_Authorization::default_instance_,
      ServiceResponse_Authorization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Authorization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Authorization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_Authorization));
  ServiceResponse_FileStatus_descriptor_ = ServiceResponse_descriptor_->nested_type(1);
  static const int ServiceResponse_FileStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus, infos_),
  };
  ServiceResponse_FileStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_FileStatus_descriptor_,
      ServiceResponse_FileStatus::default_instance_,
      ServiceResponse_FileStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_FileStatus));
  ServiceResponse_FileStatus_FileInfo_descriptor_ = ServiceResponse_FileStatus_descriptor_->nested_type(0);
  static const int ServiceResponse_FileStatus_FileInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, isbackup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, retriescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, bytesprocessed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, additionalmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, uploaddate_),
  };
  ServiceResponse_FileStatus_FileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_FileStatus_FileInfo_descriptor_,
      ServiceResponse_FileStatus_FileInfo::default_instance_,
      ServiceResponse_FileStatus_FileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileStatus_FileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_FileStatus_FileInfo));
  ServiceResponse_CopyingStatus_descriptor_ = ServiceResponse_descriptor_->nested_type(2);
  static const int ServiceResponse_CopyingStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_CopyingStatus, filestotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_CopyingStatus, filescopied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_CopyingStatus, login_),
  };
  ServiceResponse_CopyingStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_CopyingStatus_descriptor_,
      ServiceResponse_CopyingStatus::default_instance_,
      ServiceResponse_CopyingStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_CopyingStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_CopyingStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_CopyingStatus));
  ServiceResponse_MaintenanceStatus_descriptor_ = ServiceResponse_descriptor_->nested_type(3);
  static const int ServiceResponse_MaintenanceStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_MaintenanceStatus, ispaused_),
  };
  ServiceResponse_MaintenanceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_MaintenanceStatus_descriptor_,
      ServiceResponse_MaintenanceStatus::default_instance_,
      ServiceResponse_MaintenanceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_MaintenanceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_MaintenanceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_MaintenanceStatus));
  ServiceResponse_Error_descriptor_ = ServiceResponse_descriptor_->nested_type(4);
  static const int ServiceResponse_Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Error, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Error, message_),
  };
  ServiceResponse_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_Error_descriptor_,
      ServiceResponse_Error::default_instance_,
      ServiceResponse_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_Error));
  ServiceResponse_FileList_descriptor_ = ServiceResponse_descriptor_->nested_type(5);
  static const int ServiceResponse_FileList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList, foldercontentrecursively_),
  };
  ServiceResponse_FileList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_FileList_descriptor_,
      ServiceResponse_FileList::default_instance_,
      ServiceResponse_FileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_FileList));
  ServiceResponse_FileList_Item_descriptor_ = ServiceResponse_FileList_descriptor_->nested_type(0);
  static const int ServiceResponse_FileList_Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList_Item, isfolder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList_Item, name_),
  };
  ServiceResponse_FileList_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceResponse_FileList_Item_descriptor_,
      ServiceResponse_FileList_Item::default_instance_,
      ServiceResponse_FileList_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse_FileList_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceResponse_FileList_Item));
  ServiceResponse_MessageType_descriptor_ = ServiceResponse_descriptor_->enum_type(0);
  FileType_descriptor_ = file->enum_type(0);
  CommandType_descriptor_ = file->enum_type(1);
  TaskStatus_descriptor_ = file->enum_type(2);
  InfoType_descriptor_ = file->enum_type(3);
  RequestType_descriptor_ = file->enum_type(4);
  ErrorType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remoteclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_descriptor_, &ClientRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_Authorization_descriptor_, &ClientRequest_Authorization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_AddTask_descriptor_, &ClientRequest_AddTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_AddTask_File_descriptor_, &ClientRequest_AddTask_File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_Command_descriptor_, &ClientRequest_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_Maintaince_descriptor_, &ClientRequest_Maintaince::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRequest_OpenItem_descriptor_, &ClientRequest_OpenItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_descriptor_, &ServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_Authorization_descriptor_, &ServiceResponse_Authorization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_FileStatus_descriptor_, &ServiceResponse_FileStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_FileStatus_FileInfo_descriptor_, &ServiceResponse_FileStatus_FileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_CopyingStatus_descriptor_, &ServiceResponse_CopyingStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_MaintenanceStatus_descriptor_, &ServiceResponse_MaintenanceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_Error_descriptor_, &ServiceResponse_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_FileList_descriptor_, &ServiceResponse_FileList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceResponse_FileList_Item_descriptor_, &ServiceResponse_FileList_Item::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remoteclient_2eproto() {
  delete ClientRequest::default_instance_;
  delete ClientRequest_reflection_;
  delete ClientRequest_Authorization::default_instance_;
  delete ClientRequest_Authorization_reflection_;
  delete ClientRequest_AddTask::default_instance_;
  delete ClientRequest_AddTask_reflection_;
  delete ClientRequest_AddTask_File::default_instance_;
  delete ClientRequest_AddTask_File_reflection_;
  delete ClientRequest_Command::default_instance_;
  delete ClientRequest_Command_reflection_;
  delete ClientRequest_Maintaince::default_instance_;
  delete ClientRequest_Maintaince_reflection_;
  delete ClientRequest_OpenItem::default_instance_;
  delete ClientRequest_OpenItem_reflection_;
  delete ServiceResponse::default_instance_;
  delete ServiceResponse_reflection_;
  delete ServiceResponse_Authorization::default_instance_;
  delete ServiceResponse_Authorization_reflection_;
  delete ServiceResponse_FileStatus::default_instance_;
  delete ServiceResponse_FileStatus_reflection_;
  delete ServiceResponse_FileStatus_FileInfo::default_instance_;
  delete ServiceResponse_FileStatus_FileInfo_reflection_;
  delete ServiceResponse_CopyingStatus::default_instance_;
  delete ServiceResponse_CopyingStatus_reflection_;
  delete ServiceResponse_MaintenanceStatus::default_instance_;
  delete ServiceResponse_MaintenanceStatus_reflection_;
  delete ServiceResponse_Error::default_instance_;
  delete ServiceResponse_Error_reflection_;
  delete ServiceResponse_FileList::default_instance_;
  delete ServiceResponse_FileList_reflection_;
  delete ServiceResponse_FileList_Item::default_instance_;
  delete ServiceResponse_FileList_Item_reflection_;
}

void protobuf_AddDesc_remoteclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022remoteclient.proto\022\017uploadercontrol\"\262\010"
    "\n\rClientRequest\022\?\n\013messageType\030\001 \002(\0162*.u"
    "ploadercontrol.ClientRequest.MessageType"
    "\022C\n\rauthorization\030\002 \001(\0132,.uploadercontro"
    "l.ClientRequest.Authorization\0227\n\007addTask"
    "\030\003 \001(\0132&.uploadercontrol.ClientRequest.A"
    "ddTask\0227\n\007command\030\004 \001(\0132&.uploadercontro"
    "l.ClientRequest.Command\022=\n\nmaintaince\030\005 "
    "\001(\0132).uploadercontrol.ClientRequest.Main"
    "taince\0229\n\010openItem\030\006 \001(\0132\'.uploadercontr"
    "ol.ClientRequest.OpenItem\032g\n\rAuthorizati"
    "on\022\r\n\005login\030\001 \002(\t\022\024\n\014passwordHash\030\002 \002(\t\022"
    "\014\n\004host\030\003 \002(\t\022\014\n\004port\030\004 \002(\r\022\025\n\rterminate"
    "User\030\005 \001(\010\032\352\001\n\007AddTask\022\020\n\010taskName\030\001 \002(\t"
    "\022:\n\005files\030\002 \003(\0132+.uploadercontrol.Client"
    "Request.AddTask.File\022\016\n\006doCopy\030\003 \002(\010\022\031\n\021"
    "removeSourceFiles\030\004 \002(\010\022\r\n\005index\030\005 \002(\010\032W"
    "\n\004File\022\020\n\010pathName\030\002 \002(\t\022+\n\010filetype\030\003 \002"
    "(\0162\031.uploadercontrol.FileType\022\020\n\010isBacku"
    "p\030\004 \002(\010\032`\n\007Command\022\020\n\010checkSum\030\001 \001(\t\022\020\n\010"
    "isBackup\030\002 \001(\010\0221\n\013commandType\030\003 \002(\0162\034.up"
    "loadercontrol.CommandType\032i\n\nMaintaince\022"
    "1\n\013requestType\030\001 \002(\0162\034.uploadercontrol.R"
    "equestType\022\r\n\005login\030\002 \001(\t\022\031\n\021removeSourc"
    "eFiles\030\003 \001(\010\0321\n\010OpenItem\022\014\n\004item\030\001 \002(\t\022\027"
    "\n\017listRecursively\030\002 \002(\010\"Y\n\013MessageType\022\021"
    "\n\rAUTHORIZATION\020\001\022\013\n\007ADDTASK\020\002\022\013\n\007COMMAN"
    "D\020\003\022\016\n\nMAINTAINCE\020\004\022\r\n\tOPEN_ITEM\020\005\"\226\013\n\017S"
    "erviceResponse\022A\n\013messageType\030\001 \002(\0162,.up"
    "loadercontrol.ServiceResponse.MessageTyp"
    "e\022E\n\rauthorization\030\002 \001(\0132..uploadercontr"
    "ol.ServiceResponse.Authorization\022\?\n\nfile"
    "Status\030\003 \001(\0132+.uploadercontrol.ServiceRe"
    "sponse.FileStatus\022E\n\rcopyingStatus\030\004 \001(\013"
    "2..uploadercontrol.ServiceResponse.Copyi"
    "ngStatus\022M\n\021maintenanceStatus\030\005 \001(\01322.up"
    "loadercontrol.ServiceResponse.Maintenanc"
    "eStatus\0225\n\005error\030\006 \001(\0132&.uploadercontrol"
    ".ServiceResponse.Error\022;\n\010fileList\030\007 \001(\013"
    "2).uploadercontrol.ServiceResponse.FileL"
    "ist\032P\n\rAuthorization\022\023\n\004isOk\030\001 \002(\010:\005fals"
    "e\022\017\n\007isAdmin\030\002 \002(\010\022\031\n\021alreadyAuthorized\030"
    "\003 \002(\010\032\212\003\n\nFileStatus\022/\n\014responseType\030\001 \002"
    "(\0162\031.uploadercontrol.InfoType\022\r\n\005login\030\002"
    " \001(\t\022C\n\005infos\030\003 \003(\01324.uploadercontrol.Se"
    "rviceResponse.FileStatus.FileInfo\032\366\001\n\010Fi"
    "leInfo\022\014\n\004task\030\001 \002(\t\022\020\n\010pathName\030\002 \002(\t\022+"
    "\n\006status\030\003 \002(\0162\033.uploadercontrol.TaskSta"
    "tus\022\016\n\006fileId\030\004 \001(\t\022\014\n\004size\030\005 \002(\004\022\020\n\010isB"
    "ackup\030\006 \002(\010\022\020\n\010checkSum\030\007 \002(\014\022\024\n\014retries"
    "Count\030\010 \002(\r\022\026\n\016bytesProcessed\030\t \001(\004\022\031\n\021a"
    "dditionalMessage\030\n \001(\t\022\022\n\nuploadDate\030\013 \001"
    "(\004\032G\n\rCopyingStatus\022\022\n\nfilesTotal\030\001 \002(\r\022"
    "\023\n\013filesCopied\030\002 \002(\r\022\r\n\005login\030\003 \001(\t\032%\n\021M"
    "aintenanceStatus\022\020\n\010isPaused\030\001 \002(\010\032C\n\005Er"
    "ror\022)\n\005error\030\001 \002(\0162\032.uploadercontrol.Err"
    "orType\022\017\n\007message\030\002 \002(\t\032\222\001\n\010FileList\022<\n\004"
    "list\030\001 \003(\0132..uploadercontrol.ServiceResp"
    "onse.FileList.Item\022 \n\030folderContentRecur"
    "sively\030\002 \002(\010\032&\n\004Item\022\020\n\010isFolder\030\001 \002(\010\022\014"
    "\n\004name\030\002 \002(\t\"\204\001\n\013MessageType\022\030\n\024AUTHORIZ"
    "ATION_STATUS\020\001\022\017\n\013FILE_STATUS\020\002\022\022\n\016COPYI"
    "NG_STATUS\020\003\022\026\n\022MAINTENANCE_STATUS\020\004\022\020\n\014E"
    "RRORMESSAGE\020\005\022\014\n\010FILELIST\020\006*@\n\010FileType\022"
    "\016\n\nVideoTrack\020\001\022\r\n\tRoadNotes\020\002\022\n\n\006Filter"
    "\020\003\022\t\n\005Other\020\004*\264\001\n\013CommandType\022\022\n\016StartUp"
    "loading\020\001\022\n\n\006Cancel\020\002\022\t\n\005Pause\020\003\022\020\n\014Chan"
    "geOption\020\004\022\t\n\005Retry\020\005\022\036\n\032FolderStructure"
    "ErrorIgnore\020\006\022\035\n\031FolderStructureErrorRet"
    "ry\020\007\022\036\n\032FolderStructureErrorCancel\020\010*\200\001\n"
    "\nTaskStatus\022\013\n\007Pending\020\001\022\016\n\nProcessing\020\002"
    "\022\013\n\007Copying\020\003\022\r\n\tUploading\020\004\022\n\n\006Paused\020\005"
    "\022\014\n\010Retrying\020\006\022\t\n\005Error\020\007\022\006\n\002Ok\020\010\022\014\n\010Can"
    "celed\020\t*%\n\010InfoType\022\014\n\010Progress\020\001\022\013\n\007Arc"
    "hive\020\002*P\n\013RequestType\022\021\n\rGiveMeArchive\020\001"
    "\022\r\n\tSendEmail\020\002\022\021\n\rMoveToArchive\020\003\022\014\n\010Fi"
    "leList\020\004*\'\n\tErrorType\022\032\n\026FolderStructure"
    "Invalid\020\001", 3089);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remoteclient.proto", &protobuf_RegisterTypes);
  ClientRequest::default_instance_ = new ClientRequest();
  ClientRequest_Authorization::default_instance_ = new ClientRequest_Authorization();
  ClientRequest_AddTask::default_instance_ = new ClientRequest_AddTask();
  ClientRequest_AddTask_File::default_instance_ = new ClientRequest_AddTask_File();
  ClientRequest_Command::default_instance_ = new ClientRequest_Command();
  ClientRequest_Maintaince::default_instance_ = new ClientRequest_Maintaince();
  ClientRequest_OpenItem::default_instance_ = new ClientRequest_OpenItem();
  ServiceResponse::default_instance_ = new ServiceResponse();
  ServiceResponse_Authorization::default_instance_ = new ServiceResponse_Authorization();
  ServiceResponse_FileStatus::default_instance_ = new ServiceResponse_FileStatus();
  ServiceResponse_FileStatus_FileInfo::default_instance_ = new ServiceResponse_FileStatus_FileInfo();
  ServiceResponse_CopyingStatus::default_instance_ = new ServiceResponse_CopyingStatus();
  ServiceResponse_MaintenanceStatus::default_instance_ = new ServiceResponse_MaintenanceStatus();
  ServiceResponse_Error::default_instance_ = new ServiceResponse_Error();
  ServiceResponse_FileList::default_instance_ = new ServiceResponse_FileList();
  ServiceResponse_FileList_Item::default_instance_ = new ServiceResponse_FileList_Item();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ClientRequest_Authorization::default_instance_->InitAsDefaultInstance();
  ClientRequest_AddTask::default_instance_->InitAsDefaultInstance();
  ClientRequest_AddTask_File::default_instance_->InitAsDefaultInstance();
  ClientRequest_Command::default_instance_->InitAsDefaultInstance();
  ClientRequest_Maintaince::default_instance_->InitAsDefaultInstance();
  ClientRequest_OpenItem::default_instance_->InitAsDefaultInstance();
  ServiceResponse::default_instance_->InitAsDefaultInstance();
  ServiceResponse_Authorization::default_instance_->InitAsDefaultInstance();
  ServiceResponse_FileStatus::default_instance_->InitAsDefaultInstance();
  ServiceResponse_FileStatus_FileInfo::default_instance_->InitAsDefaultInstance();
  ServiceResponse_CopyingStatus::default_instance_->InitAsDefaultInstance();
  ServiceResponse_MaintenanceStatus::default_instance_->InitAsDefaultInstance();
  ServiceResponse_Error::default_instance_->InitAsDefaultInstance();
  ServiceResponse_FileList::default_instance_->InitAsDefaultInstance();
  ServiceResponse_FileList_Item::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remoteclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remoteclient_2eproto {
  StaticDescriptorInitializer_remoteclient_2eproto() {
    protobuf_AddDesc_remoteclient_2eproto();
  }
} static_descriptor_initializer_remoteclient_2eproto_;
const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileType_descriptor_;
}
bool FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandType_descriptor_;
}
bool CommandType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}
bool TaskStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InfoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoType_descriptor_;
}
bool InfoType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_descriptor_;
}
bool ErrorType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientRequest_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_MessageType_descriptor_;
}
bool ClientRequest_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientRequest_MessageType ClientRequest::AUTHORIZATION;
const ClientRequest_MessageType ClientRequest::ADDTASK;
const ClientRequest_MessageType ClientRequest::COMMAND;
const ClientRequest_MessageType ClientRequest::MAINTAINCE;
const ClientRequest_MessageType ClientRequest::OPEN_ITEM;
const ClientRequest_MessageType ClientRequest::MessageType_MIN;
const ClientRequest_MessageType ClientRequest::MessageType_MAX;
const int ClientRequest::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientRequest_Authorization::kLoginFieldNumber;
const int ClientRequest_Authorization::kPasswordHashFieldNumber;
const int ClientRequest_Authorization::kHostFieldNumber;
const int ClientRequest_Authorization::kPortFieldNumber;
const int ClientRequest_Authorization::kTerminateUserFieldNumber;
#endif  // !_MSC_VER

ClientRequest_Authorization::ClientRequest_Authorization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_Authorization::InitAsDefaultInstance() {
}

ClientRequest_Authorization::ClientRequest_Authorization(const ClientRequest_Authorization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_Authorization::SharedCtor() {
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwordhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  terminateuser_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_Authorization::~ClientRequest_Authorization() {
  SharedDtor();
}

void ClientRequest_Authorization::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (passwordhash_ != &::google::protobuf::internal::kEmptyString) {
    delete passwordhash_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_Authorization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_Authorization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Authorization_descriptor_;
}

const ClientRequest_Authorization& ClientRequest_Authorization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_Authorization* ClientRequest_Authorization::default_instance_ = NULL;

ClientRequest_Authorization* ClientRequest_Authorization::New() const {
  return new ClientRequest_Authorization;
}

void ClientRequest_Authorization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
    if (has_passwordhash()) {
      if (passwordhash_ != &::google::protobuf::internal::kEmptyString) {
        passwordhash_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
    terminateuser_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_Authorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwordHash;
        break;
      }

      // required string passwordHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwordHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwordhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwordhash().data(), this->passwordhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_host;
        break;
      }

      // required string host = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_terminateUser;
        break;
      }

      // optional bool terminateUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminateUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminateuser_)));
          set_has_terminateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_Authorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->login(), output);
  }

  // required string passwordHash = 2;
  if (has_passwordhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwordhash().data(), this->passwordhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->passwordhash(), output);
  }

  // required string host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->host(), output);
  }

  // required uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional bool terminateUser = 5;
  if (has_terminateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->terminateuser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_Authorization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // required string passwordHash = 2;
  if (has_passwordhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwordhash().data(), this->passwordhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwordhash(), target);
  }

  // required string host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // required uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // optional bool terminateUser = 5;
  if (has_terminateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->terminateuser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_Authorization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // required string passwordHash = 2;
    if (has_passwordhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwordhash());
    }

    // required string host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool terminateUser = 5;
    if (has_terminateuser()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_Authorization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_Authorization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_Authorization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_Authorization::MergeFrom(const ClientRequest_Authorization& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_passwordhash()) {
      set_passwordhash(from.passwordhash());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_terminateuser()) {
      set_terminateuser(from.terminateuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_Authorization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_Authorization::CopyFrom(const ClientRequest_Authorization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_Authorization::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientRequest_Authorization::Swap(ClientRequest_Authorization* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(passwordhash_, other->passwordhash_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(terminateuser_, other->terminateuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_Authorization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_Authorization_descriptor_;
  metadata.reflection = ClientRequest_Authorization_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest_AddTask_File::kPathNameFieldNumber;
const int ClientRequest_AddTask_File::kFiletypeFieldNumber;
const int ClientRequest_AddTask_File::kIsBackupFieldNumber;
#endif  // !_MSC_VER

ClientRequest_AddTask_File::ClientRequest_AddTask_File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_AddTask_File::InitAsDefaultInstance() {
}

ClientRequest_AddTask_File::ClientRequest_AddTask_File(const ClientRequest_AddTask_File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_AddTask_File::SharedCtor() {
  _cached_size_ = 0;
  pathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetype_ = 1;
  isbackup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_AddTask_File::~ClientRequest_AddTask_File() {
  SharedDtor();
}

void ClientRequest_AddTask_File::SharedDtor() {
  if (pathname_ != &::google::protobuf::internal::kEmptyString) {
    delete pathname_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_AddTask_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_AddTask_File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_AddTask_File_descriptor_;
}

const ClientRequest_AddTask_File& ClientRequest_AddTask_File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_AddTask_File* ClientRequest_AddTask_File::default_instance_ = NULL;

ClientRequest_AddTask_File* ClientRequest_AddTask_File::New() const {
  return new ClientRequest_AddTask_File;
}

void ClientRequest_AddTask_File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pathname()) {
      if (pathname_ != &::google::protobuf::internal::kEmptyString) {
        pathname_->clear();
      }
    }
    filetype_ = 1;
    isbackup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_AddTask_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pathName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filetype;
        break;
      }

      // required .uploadercontrol.FileType filetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::FileType_IsValid(value)) {
            set_filetype(static_cast< ::uploadercontrol::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isBackup;
        break;
      }

      // required bool isBackup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBackup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbackup_)));
          set_has_isbackup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_AddTask_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pathName = 2;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pathname(), output);
  }

  // required .uploadercontrol.FileType filetype = 3;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filetype(), output);
  }

  // required bool isBackup = 4;
  if (has_isbackup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbackup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_AddTask_File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pathName = 2;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pathname(), target);
  }

  // required .uploadercontrol.FileType filetype = 3;
  if (has_filetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filetype(), target);
  }

  // required bool isBackup = 4;
  if (has_isbackup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbackup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_AddTask_File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pathName = 2;
    if (has_pathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathname());
    }

    // required .uploadercontrol.FileType filetype = 3;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
    }

    // required bool isBackup = 4;
    if (has_isbackup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_AddTask_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_AddTask_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_AddTask_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_AddTask_File::MergeFrom(const ClientRequest_AddTask_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pathname()) {
      set_pathname(from.pathname());
    }
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
    if (from.has_isbackup()) {
      set_isbackup(from.isbackup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_AddTask_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_AddTask_File::CopyFrom(const ClientRequest_AddTask_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_AddTask_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientRequest_AddTask_File::Swap(ClientRequest_AddTask_File* other) {
  if (other != this) {
    std::swap(pathname_, other->pathname_);
    std::swap(filetype_, other->filetype_);
    std::swap(isbackup_, other->isbackup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_AddTask_File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_AddTask_File_descriptor_;
  metadata.reflection = ClientRequest_AddTask_File_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest_AddTask::kTaskNameFieldNumber;
const int ClientRequest_AddTask::kFilesFieldNumber;
const int ClientRequest_AddTask::kDoCopyFieldNumber;
const int ClientRequest_AddTask::kRemoveSourceFilesFieldNumber;
const int ClientRequest_AddTask::kIndexFieldNumber;
#endif  // !_MSC_VER

ClientRequest_AddTask::ClientRequest_AddTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_AddTask::InitAsDefaultInstance() {
}

ClientRequest_AddTask::ClientRequest_AddTask(const ClientRequest_AddTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_AddTask::SharedCtor() {
  _cached_size_ = 0;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  docopy_ = false;
  removesourcefiles_ = false;
  index_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_AddTask::~ClientRequest_AddTask() {
  SharedDtor();
}

void ClientRequest_AddTask::SharedDtor() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_AddTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_AddTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_AddTask_descriptor_;
}

const ClientRequest_AddTask& ClientRequest_AddTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_AddTask* ClientRequest_AddTask::default_instance_ = NULL;

ClientRequest_AddTask* ClientRequest_AddTask::New() const {
  return new ClientRequest_AddTask;
}

void ClientRequest_AddTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
    docopy_ = false;
    removesourcefiles_ = false;
    index_ = false;
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_AddTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }

      // repeated .uploadercontrol.ClientRequest.AddTask.File files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectTag(24)) goto parse_doCopy;
        break;
      }

      // required bool doCopy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doCopy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &docopy_)));
          set_has_docopy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_removeSourceFiles;
        break;
      }

      // required bool removeSourceFiles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removeSourceFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removesourcefiles_)));
          set_has_removesourcefiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required bool index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_AddTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskName = 1;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskname(), output);
  }

  // repeated .uploadercontrol.ClientRequest.AddTask.File files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->files(i), output);
  }

  // required bool doCopy = 3;
  if (has_docopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->docopy(), output);
  }

  // required bool removeSourceFiles = 4;
  if (has_removesourcefiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->removesourcefiles(), output);
  }

  // required bool index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_AddTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskName = 1;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskname(), target);
  }

  // repeated .uploadercontrol.ClientRequest.AddTask.File files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->files(i), target);
  }

  // required bool doCopy = 3;
  if (has_docopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->docopy(), target);
  }

  // required bool removeSourceFiles = 4;
  if (has_removesourcefiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->removesourcefiles(), target);
  }

  // required bool index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_AddTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskName = 1;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }

    // required bool doCopy = 3;
    if (has_docopy()) {
      total_size += 1 + 1;
    }

    // required bool removeSourceFiles = 4;
    if (has_removesourcefiles()) {
      total_size += 1 + 1;
    }

    // required bool index = 5;
    if (has_index()) {
      total_size += 1 + 1;
    }

  }
  // repeated .uploadercontrol.ClientRequest.AddTask.File files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_AddTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_AddTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_AddTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_AddTask::MergeFrom(const ClientRequest_AddTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
    if (from.has_docopy()) {
      set_docopy(from.docopy());
    }
    if (from.has_removesourcefiles()) {
      set_removesourcefiles(from.removesourcefiles());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_AddTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_AddTask::CopyFrom(const ClientRequest_AddTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_AddTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < files_size(); i++) {
    if (!this->files(i).IsInitialized()) return false;
  }
  return true;
}

void ClientRequest_AddTask::Swap(ClientRequest_AddTask* other) {
  if (other != this) {
    std::swap(taskname_, other->taskname_);
    files_.Swap(&other->files_);
    std::swap(docopy_, other->docopy_);
    std::swap(removesourcefiles_, other->removesourcefiles_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_AddTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_AddTask_descriptor_;
  metadata.reflection = ClientRequest_AddTask_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest_Command::kCheckSumFieldNumber;
const int ClientRequest_Command::kIsBackupFieldNumber;
const int ClientRequest_Command::kCommandTypeFieldNumber;
#endif  // !_MSC_VER

ClientRequest_Command::ClientRequest_Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_Command::InitAsDefaultInstance() {
}

ClientRequest_Command::ClientRequest_Command(const ClientRequest_Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_Command::SharedCtor() {
  _cached_size_ = 0;
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbackup_ = false;
  commandtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_Command::~ClientRequest_Command() {
  SharedDtor();
}

void ClientRequest_Command::SharedDtor() {
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Command_descriptor_;
}

const ClientRequest_Command& ClientRequest_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_Command* ClientRequest_Command::default_instance_ = NULL;

ClientRequest_Command* ClientRequest_Command::New() const {
  return new ClientRequest_Command;
}

void ClientRequest_Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
    isbackup_ = false;
    commandtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string checkSum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isBackup;
        break;
      }

      // optional bool isBackup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBackup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbackup_)));
          set_has_isbackup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandType;
        break;
      }

      // required .uploadercontrol.CommandType commandType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::CommandType_IsValid(value)) {
            set_commandtype(static_cast< ::uploadercontrol::CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string checkSum = 1;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->checksum(), output);
  }

  // optional bool isBackup = 2;
  if (has_isbackup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isbackup(), output);
  }

  // required .uploadercontrol.CommandType commandType = 3;
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->commandtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string checkSum = 1;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->checksum(), target);
  }

  // optional bool isBackup = 2;
  if (has_isbackup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isbackup(), target);
  }

  // required .uploadercontrol.CommandType commandType = 3;
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->commandtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string checkSum = 1;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }

    // optional bool isBackup = 2;
    if (has_isbackup()) {
      total_size += 1 + 1;
    }

    // required .uploadercontrol.CommandType commandType = 3;
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_Command::MergeFrom(const ClientRequest_Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_isbackup()) {
      set_isbackup(from.isbackup());
    }
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_Command::CopyFrom(const ClientRequest_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ClientRequest_Command::Swap(ClientRequest_Command* other) {
  if (other != this) {
    std::swap(checksum_, other->checksum_);
    std::swap(isbackup_, other->isbackup_);
    std::swap(commandtype_, other->commandtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_Command_descriptor_;
  metadata.reflection = ClientRequest_Command_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest_Maintaince::kRequestTypeFieldNumber;
const int ClientRequest_Maintaince::kLoginFieldNumber;
const int ClientRequest_Maintaince::kRemoveSourceFilesFieldNumber;
#endif  // !_MSC_VER

ClientRequest_Maintaince::ClientRequest_Maintaince()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_Maintaince::InitAsDefaultInstance() {
}

ClientRequest_Maintaince::ClientRequest_Maintaince(const ClientRequest_Maintaince& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_Maintaince::SharedCtor() {
  _cached_size_ = 0;
  requesttype_ = 1;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  removesourcefiles_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_Maintaince::~ClientRequest_Maintaince() {
  SharedDtor();
}

void ClientRequest_Maintaince::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_Maintaince::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_Maintaince::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_Maintaince_descriptor_;
}

const ClientRequest_Maintaince& ClientRequest_Maintaince::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_Maintaince* ClientRequest_Maintaince::default_instance_ = NULL;

ClientRequest_Maintaince* ClientRequest_Maintaince::New() const {
  return new ClientRequest_Maintaince;
}

void ClientRequest_Maintaince::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requesttype_ = 1;
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
    removesourcefiles_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_Maintaince::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .uploadercontrol.RequestType requestType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::RequestType_IsValid(value)) {
            set_requesttype(static_cast< ::uploadercontrol::RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional string login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_removeSourceFiles;
        break;
      }

      // optional bool removeSourceFiles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removeSourceFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removesourcefiles_)));
          set_has_removesourcefiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_Maintaince::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .uploadercontrol.RequestType requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requesttype(), output);
  }

  // optional string login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login(), output);
  }

  // optional bool removeSourceFiles = 3;
  if (has_removesourcefiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->removesourcefiles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_Maintaince::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .uploadercontrol.RequestType requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requesttype(), target);
  }

  // optional string login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login(), target);
  }

  // optional bool removeSourceFiles = 3;
  if (has_removesourcefiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->removesourcefiles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_Maintaince::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .uploadercontrol.RequestType requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // optional string login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional bool removeSourceFiles = 3;
    if (has_removesourcefiles()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_Maintaince::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_Maintaince* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_Maintaince*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_Maintaince::MergeFrom(const ClientRequest_Maintaince& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_removesourcefiles()) {
      set_removesourcefiles(from.removesourcefiles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_Maintaince::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_Maintaince::CopyFrom(const ClientRequest_Maintaince& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_Maintaince::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientRequest_Maintaince::Swap(ClientRequest_Maintaince* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(login_, other->login_);
    std::swap(removesourcefiles_, other->removesourcefiles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_Maintaince::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_Maintaince_descriptor_;
  metadata.reflection = ClientRequest_Maintaince_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest_OpenItem::kItemFieldNumber;
const int ClientRequest_OpenItem::kListRecursivelyFieldNumber;
#endif  // !_MSC_VER

ClientRequest_OpenItem::ClientRequest_OpenItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest_OpenItem::InitAsDefaultInstance() {
}

ClientRequest_OpenItem::ClientRequest_OpenItem(const ClientRequest_OpenItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest_OpenItem::SharedCtor() {
  _cached_size_ = 0;
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listrecursively_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest_OpenItem::~ClientRequest_OpenItem() {
  SharedDtor();
}

void ClientRequest_OpenItem::SharedDtor() {
  if (item_ != &::google::protobuf::internal::kEmptyString) {
    delete item_;
  }
  if (this != default_instance_) {
  }
}

void ClientRequest_OpenItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest_OpenItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_OpenItem_descriptor_;
}

const ClientRequest_OpenItem& ClientRequest_OpenItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest_OpenItem* ClientRequest_OpenItem::default_instance_ = NULL;

ClientRequest_OpenItem* ClientRequest_OpenItem::New() const {
  return new ClientRequest_OpenItem;
}

void ClientRequest_OpenItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::kEmptyString) {
        item_->clear();
      }
    }
    listrecursively_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest_OpenItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_listRecursively;
        break;
      }

      // required bool listRecursively = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listRecursively:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &listrecursively_)));
          set_has_listrecursively();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest_OpenItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item(), output);
  }

  // required bool listRecursively = 2;
  if (has_listrecursively()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->listrecursively(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest_OpenItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item(), target);
  }

  // required bool listRecursively = 2;
  if (has_listrecursively()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->listrecursively(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest_OpenItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

    // required bool listRecursively = 2;
    if (has_listrecursively()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest_OpenItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest_OpenItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest_OpenItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest_OpenItem::MergeFrom(const ClientRequest_OpenItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_listrecursively()) {
      set_listrecursively(from.listrecursively());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest_OpenItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest_OpenItem::CopyFrom(const ClientRequest_OpenItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest_OpenItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientRequest_OpenItem::Swap(ClientRequest_OpenItem* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(listrecursively_, other->listrecursively_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest_OpenItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_OpenItem_descriptor_;
  metadata.reflection = ClientRequest_OpenItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientRequest::kMessageTypeFieldNumber;
const int ClientRequest::kAuthorizationFieldNumber;
const int ClientRequest::kAddTaskFieldNumber;
const int ClientRequest::kCommandFieldNumber;
const int ClientRequest::kMaintainceFieldNumber;
const int ClientRequest::kOpenItemFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRequest::InitAsDefaultInstance() {
  authorization_ = const_cast< ::uploadercontrol::ClientRequest_Authorization*>(&::uploadercontrol::ClientRequest_Authorization::default_instance());
  addtask_ = const_cast< ::uploadercontrol::ClientRequest_AddTask*>(&::uploadercontrol::ClientRequest_AddTask::default_instance());
  command_ = const_cast< ::uploadercontrol::ClientRequest_Command*>(&::uploadercontrol::ClientRequest_Command::default_instance());
  maintaince_ = const_cast< ::uploadercontrol::ClientRequest_Maintaince*>(&::uploadercontrol::ClientRequest_Maintaince::default_instance());
  openitem_ = const_cast< ::uploadercontrol::ClientRequest_OpenItem*>(&::uploadercontrol::ClientRequest_OpenItem::default_instance());
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRequest::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 1;
  authorization_ = NULL;
  addtask_ = NULL;
  command_ = NULL;
  maintaince_ = NULL;
  openitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (this != default_instance_) {
    delete authorization_;
    delete addtask_;
    delete command_;
    delete maintaince_;
    delete openitem_;
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRequest_descriptor_;
}

const ClientRequest& ClientRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 1;
    if (has_authorization()) {
      if (authorization_ != NULL) authorization_->::uploadercontrol::ClientRequest_Authorization::Clear();
    }
    if (has_addtask()) {
      if (addtask_ != NULL) addtask_->::uploadercontrol::ClientRequest_AddTask::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::uploadercontrol::ClientRequest_Command::Clear();
    }
    if (has_maintaince()) {
      if (maintaince_ != NULL) maintaince_->::uploadercontrol::ClientRequest_Maintaince::Clear();
    }
    if (has_openitem()) {
      if (openitem_ != NULL) openitem_->::uploadercontrol::ClientRequest_OpenItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .uploadercontrol.ClientRequest.MessageType messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::ClientRequest_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::uploadercontrol::ClientRequest_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }

      // optional .uploadercontrol.ClientRequest.Authorization authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authorization()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addTask;
        break;
      }

      // optional .uploadercontrol.ClientRequest.AddTask addTask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addtask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional .uploadercontrol.ClientRequest.Command command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_maintaince;
        break;
      }

      // optional .uploadercontrol.ClientRequest.Maintaince maintaince = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maintaince:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maintaince()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_openItem;
        break;
      }

      // optional .uploadercontrol.ClientRequest.OpenItem openItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .uploadercontrol.ClientRequest.MessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .uploadercontrol.ClientRequest.Authorization authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->authorization(), output);
  }

  // optional .uploadercontrol.ClientRequest.AddTask addTask = 3;
  if (has_addtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addtask(), output);
  }

  // optional .uploadercontrol.ClientRequest.Command command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->command(), output);
  }

  // optional .uploadercontrol.ClientRequest.Maintaince maintaince = 5;
  if (has_maintaince()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->maintaince(), output);
  }

  // optional .uploadercontrol.ClientRequest.OpenItem openItem = 6;
  if (has_openitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->openitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .uploadercontrol.ClientRequest.MessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .uploadercontrol.ClientRequest.Authorization authorization = 2;
  if (has_authorization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->authorization(), target);
  }

  // optional .uploadercontrol.ClientRequest.AddTask addTask = 3;
  if (has_addtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->addtask(), target);
  }

  // optional .uploadercontrol.ClientRequest.Command command = 4;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->command(), target);
  }

  // optional .uploadercontrol.ClientRequest.Maintaince maintaince = 5;
  if (has_maintaince()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->maintaince(), target);
  }

  // optional .uploadercontrol.ClientRequest.OpenItem openItem = 6;
  if (has_openitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->openitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .uploadercontrol.ClientRequest.MessageType messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // optional .uploadercontrol.ClientRequest.Authorization authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authorization());
    }

    // optional .uploadercontrol.ClientRequest.AddTask addTask = 3;
    if (has_addtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addtask());
    }

    // optional .uploadercontrol.ClientRequest.Command command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .uploadercontrol.ClientRequest.Maintaince maintaince = 5;
    if (has_maintaince()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maintaince());
    }

    // optional .uploadercontrol.ClientRequest.OpenItem openItem = 6;
    if (has_openitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_authorization()) {
      mutable_authorization()->::uploadercontrol::ClientRequest_Authorization::MergeFrom(from.authorization());
    }
    if (from.has_addtask()) {
      mutable_addtask()->::uploadercontrol::ClientRequest_AddTask::MergeFrom(from.addtask());
    }
    if (from.has_command()) {
      mutable_command()->::uploadercontrol::ClientRequest_Command::MergeFrom(from.command());
    }
    if (from.has_maintaince()) {
      mutable_maintaince()->::uploadercontrol::ClientRequest_Maintaince::MergeFrom(from.maintaince());
    }
    if (from.has_openitem()) {
      mutable_openitem()->::uploadercontrol::ClientRequest_OpenItem::MergeFrom(from.openitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_authorization()) {
    if (!this->authorization().IsInitialized()) return false;
  }
  if (has_addtask()) {
    if (!this->addtask().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_maintaince()) {
    if (!this->maintaince().IsInitialized()) return false;
  }
  if (has_openitem()) {
    if (!this->openitem().IsInitialized()) return false;
  }
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(authorization_, other->authorization_);
    std::swap(addtask_, other->addtask_);
    std::swap(command_, other->command_);
    std::swap(maintaince_, other->maintaince_);
    std::swap(openitem_, other->openitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRequest_descriptor_;
  metadata.reflection = ClientRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServiceResponse_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_MessageType_descriptor_;
}
bool ServiceResponse_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServiceResponse_MessageType ServiceResponse::AUTHORIZATION_STATUS;
const ServiceResponse_MessageType ServiceResponse::FILE_STATUS;
const ServiceResponse_MessageType ServiceResponse::COPYING_STATUS;
const ServiceResponse_MessageType ServiceResponse::MAINTENANCE_STATUS;
const ServiceResponse_MessageType ServiceResponse::ERRORMESSAGE;
const ServiceResponse_MessageType ServiceResponse::FILELIST;
const ServiceResponse_MessageType ServiceResponse::MessageType_MIN;
const ServiceResponse_MessageType ServiceResponse::MessageType_MAX;
const int ServiceResponse::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServiceResponse_Authorization::kIsOkFieldNumber;
const int ServiceResponse_Authorization::kIsAdminFieldNumber;
const int ServiceResponse_Authorization::kAlreadyAuthorizedFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_Authorization::ServiceResponse_Authorization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_Authorization::InitAsDefaultInstance() {
}

ServiceResponse_Authorization::ServiceResponse_Authorization(const ServiceResponse_Authorization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_Authorization::SharedCtor() {
  _cached_size_ = 0;
  isok_ = false;
  isadmin_ = false;
  alreadyauthorized_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_Authorization::~ServiceResponse_Authorization() {
  SharedDtor();
}

void ServiceResponse_Authorization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceResponse_Authorization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_Authorization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_Authorization_descriptor_;
}

const ServiceResponse_Authorization& ServiceResponse_Authorization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_Authorization* ServiceResponse_Authorization::default_instance_ = NULL;

ServiceResponse_Authorization* ServiceResponse_Authorization::New() const {
  return new ServiceResponse_Authorization;
}

void ServiceResponse_Authorization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isok_ = false;
    isadmin_ = false;
    alreadyauthorized_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_Authorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isOk = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));
          set_has_isok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAdmin;
        break;
      }

      // required bool isAdmin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadmin_)));
          set_has_isadmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alreadyAuthorized;
        break;
      }

      // required bool alreadyAuthorized = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyAuthorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alreadyauthorized_)));
          set_has_alreadyauthorized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_Authorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isOk = 1 [default = false];
  if (has_isok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isok(), output);
  }

  // required bool isAdmin = 2;
  if (has_isadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isadmin(), output);
  }

  // required bool alreadyAuthorized = 3;
  if (has_alreadyauthorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->alreadyauthorized(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_Authorization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isOk = 1 [default = false];
  if (has_isok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isok(), target);
  }

  // required bool isAdmin = 2;
  if (has_isadmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isadmin(), target);
  }

  // required bool alreadyAuthorized = 3;
  if (has_alreadyauthorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->alreadyauthorized(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_Authorization::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isOk = 1 [default = false];
    if (has_isok()) {
      total_size += 1 + 1;
    }

    // required bool isAdmin = 2;
    if (has_isadmin()) {
      total_size += 1 + 1;
    }

    // required bool alreadyAuthorized = 3;
    if (has_alreadyauthorized()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_Authorization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_Authorization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_Authorization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_Authorization::MergeFrom(const ServiceResponse_Authorization& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isok()) {
      set_isok(from.isok());
    }
    if (from.has_isadmin()) {
      set_isadmin(from.isadmin());
    }
    if (from.has_alreadyauthorized()) {
      set_alreadyauthorized(from.alreadyauthorized());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_Authorization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_Authorization::CopyFrom(const ServiceResponse_Authorization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_Authorization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServiceResponse_Authorization::Swap(ServiceResponse_Authorization* other) {
  if (other != this) {
    std::swap(isok_, other->isok_);
    std::swap(isadmin_, other->isadmin_);
    std::swap(alreadyauthorized_, other->alreadyauthorized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_Authorization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_Authorization_descriptor_;
  metadata.reflection = ServiceResponse_Authorization_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_FileStatus_FileInfo::kTaskFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kPathNameFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kStatusFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kFileIdFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kSizeFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kIsBackupFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kCheckSumFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kRetriesCountFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kBytesProcessedFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kAdditionalMessageFieldNumber;
const int ServiceResponse_FileStatus_FileInfo::kUploadDateFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_FileStatus_FileInfo::ServiceResponse_FileStatus_FileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_FileStatus_FileInfo::InitAsDefaultInstance() {
}

ServiceResponse_FileStatus_FileInfo::ServiceResponse_FileStatus_FileInfo(const ServiceResponse_FileStatus_FileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_FileStatus_FileInfo::SharedCtor() {
  _cached_size_ = 0;
  task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  isbackup_ = false;
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retriescount_ = 0u;
  bytesprocessed_ = GOOGLE_ULONGLONG(0);
  additionalmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uploaddate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_FileStatus_FileInfo::~ServiceResponse_FileStatus_FileInfo() {
  SharedDtor();
}

void ServiceResponse_FileStatus_FileInfo::SharedDtor() {
  if (task_ != &::google::protobuf::internal::kEmptyString) {
    delete task_;
  }
  if (pathname_ != &::google::protobuf::internal::kEmptyString) {
    delete pathname_;
  }
  if (fileid_ != &::google::protobuf::internal::kEmptyString) {
    delete fileid_;
  }
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (additionalmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete additionalmessage_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResponse_FileStatus_FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_FileStatus_FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_FileStatus_FileInfo_descriptor_;
}

const ServiceResponse_FileStatus_FileInfo& ServiceResponse_FileStatus_FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_FileStatus_FileInfo* ServiceResponse_FileStatus_FileInfo::default_instance_ = NULL;

ServiceResponse_FileStatus_FileInfo* ServiceResponse_FileStatus_FileInfo::New() const {
  return new ServiceResponse_FileStatus_FileInfo;
}

void ServiceResponse_FileStatus_FileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != &::google::protobuf::internal::kEmptyString) {
        task_->clear();
      }
    }
    if (has_pathname()) {
      if (pathname_ != &::google::protobuf::internal::kEmptyString) {
        pathname_->clear();
      }
    }
    status_ = 1;
    if (has_fileid()) {
      if (fileid_ != &::google::protobuf::internal::kEmptyString) {
        fileid_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
    isbackup_ = false;
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
    retriescount_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytesprocessed_ = GOOGLE_ULONGLONG(0);
    if (has_additionalmessage()) {
      if (additionalmessage_ != &::google::protobuf::internal::kEmptyString) {
        additionalmessage_->clear();
      }
    }
    uploaddate_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_FileStatus_FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task().data(), this->task().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pathName;
        break;
      }

      // required string pathName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pathname().data(), this->pathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .uploadercontrol.TaskStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::TaskStatus_IsValid(value)) {
            set_status(static_cast< ::uploadercontrol::TaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fileId;
        break;
      }

      // optional string fileId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // required uint64 size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isBackup;
        break;
      }

      // required bool isBackup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBackup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbackup_)));
          set_has_isbackup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_checkSum;
        break;
      }

      // required bytes checkSum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkSum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_retriesCount;
        break;
      }

      // required uint32 retriesCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retriesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retriescount_)));
          set_has_retriescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bytesProcessed;
        break;
      }

      // optional uint64 bytesProcessed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesProcessed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytesprocessed_)));
          set_has_bytesprocessed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_additionalMessage;
        break;
      }

      // optional string additionalMessage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additionalMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additionalmessage().data(), this->additionalmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_uploadDate;
        break;
      }

      // optional uint64 uploadDate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uploaddate_)));
          set_has_uploaddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_FileStatus_FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task().data(), this->task().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->task(), output);
  }

  // required string pathName = 2;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pathname(), output);
  }

  // required .uploadercontrol.TaskStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional string fileId = 4;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fileid(), output);
  }

  // required uint64 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->size(), output);
  }

  // required bool isBackup = 6;
  if (has_isbackup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isbackup(), output);
  }

  // required bytes checkSum = 7;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->checksum(), output);
  }

  // required uint32 retriesCount = 8;
  if (has_retriescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->retriescount(), output);
  }

  // optional uint64 bytesProcessed = 9;
  if (has_bytesprocessed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bytesprocessed(), output);
  }

  // optional string additionalMessage = 10;
  if (has_additionalmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalmessage().data(), this->additionalmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->additionalmessage(), output);
  }

  // optional uint64 uploadDate = 11;
  if (has_uploaddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->uploaddate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_FileStatus_FileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task().data(), this->task().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task(), target);
  }

  // required string pathName = 2;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pathname().data(), this->pathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pathname(), target);
  }

  // required .uploadercontrol.TaskStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional string fileId = 4;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fileid(), target);
  }

  // required uint64 size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->size(), target);
  }

  // required bool isBackup = 6;
  if (has_isbackup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isbackup(), target);
  }

  // required bytes checkSum = 7;
  if (has_checksum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->checksum(), target);
  }

  // required uint32 retriesCount = 8;
  if (has_retriescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->retriescount(), target);
  }

  // optional uint64 bytesProcessed = 9;
  if (has_bytesprocessed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->bytesprocessed(), target);
  }

  // optional string additionalMessage = 10;
  if (has_additionalmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additionalmessage().data(), this->additionalmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->additionalmessage(), target);
  }

  // optional uint64 uploadDate = 11;
  if (has_uploaddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->uploaddate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_FileStatus_FileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task());
    }

    // required string pathName = 2;
    if (has_pathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pathname());
    }

    // required .uploadercontrol.TaskStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string fileId = 4;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // required uint64 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required bool isBackup = 6;
    if (has_isbackup()) {
      total_size += 1 + 1;
    }

    // required bytes checkSum = 7;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->checksum());
    }

    // required uint32 retriesCount = 8;
    if (has_retriescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retriescount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 bytesProcessed = 9;
    if (has_bytesprocessed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytesprocessed());
    }

    // optional string additionalMessage = 10;
    if (has_additionalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalmessage());
    }

    // optional uint64 uploadDate = 11;
    if (has_uploaddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uploaddate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_FileStatus_FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_FileStatus_FileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_FileStatus_FileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_FileStatus_FileInfo::MergeFrom(const ServiceResponse_FileStatus_FileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_pathname()) {
      set_pathname(from.pathname());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_isbackup()) {
      set_isbackup(from.isbackup());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_retriescount()) {
      set_retriescount(from.retriescount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytesprocessed()) {
      set_bytesprocessed(from.bytesprocessed());
    }
    if (from.has_additionalmessage()) {
      set_additionalmessage(from.additionalmessage());
    }
    if (from.has_uploaddate()) {
      set_uploaddate(from.uploaddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_FileStatus_FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_FileStatus_FileInfo::CopyFrom(const ServiceResponse_FileStatus_FileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_FileStatus_FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f7) != 0x000000f7) return false;

  return true;
}

void ServiceResponse_FileStatus_FileInfo::Swap(ServiceResponse_FileStatus_FileInfo* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(pathname_, other->pathname_);
    std::swap(status_, other->status_);
    std::swap(fileid_, other->fileid_);
    std::swap(size_, other->size_);
    std::swap(isbackup_, other->isbackup_);
    std::swap(checksum_, other->checksum_);
    std::swap(retriescount_, other->retriescount_);
    std::swap(bytesprocessed_, other->bytesprocessed_);
    std::swap(additionalmessage_, other->additionalmessage_);
    std::swap(uploaddate_, other->uploaddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_FileStatus_FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_FileStatus_FileInfo_descriptor_;
  metadata.reflection = ServiceResponse_FileStatus_FileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_FileStatus::kResponseTypeFieldNumber;
const int ServiceResponse_FileStatus::kLoginFieldNumber;
const int ServiceResponse_FileStatus::kInfosFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_FileStatus::ServiceResponse_FileStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_FileStatus::InitAsDefaultInstance() {
}

ServiceResponse_FileStatus::ServiceResponse_FileStatus(const ServiceResponse_FileStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_FileStatus::SharedCtor() {
  _cached_size_ = 0;
  responsetype_ = 1;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_FileStatus::~ServiceResponse_FileStatus() {
  SharedDtor();
}

void ServiceResponse_FileStatus::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResponse_FileStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_FileStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_FileStatus_descriptor_;
}

const ServiceResponse_FileStatus& ServiceResponse_FileStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_FileStatus* ServiceResponse_FileStatus::default_instance_ = NULL;

ServiceResponse_FileStatus* ServiceResponse_FileStatus::New() const {
  return new ServiceResponse_FileStatus;
}

void ServiceResponse_FileStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsetype_ = 1;
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_FileStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .uploadercontrol.InfoType responseType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::InfoType_IsValid(value)) {
            set_responsetype(static_cast< ::uploadercontrol::InfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login;
        break;
      }

      // optional string login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .uploadercontrol.ServiceResponse.FileStatus.FileInfo infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_FileStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .uploadercontrol.InfoType responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsetype(), output);
  }

  // optional string login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login(), output);
  }

  // repeated .uploadercontrol.ServiceResponse.FileStatus.FileInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_FileStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .uploadercontrol.InfoType responseType = 1;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsetype(), target);
  }

  // optional string login = 2;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login(), target);
  }

  // repeated .uploadercontrol.ServiceResponse.FileStatus.FileInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_FileStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .uploadercontrol.InfoType responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsetype());
    }

    // optional string login = 2;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

  }
  // repeated .uploadercontrol.ServiceResponse.FileStatus.FileInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_FileStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_FileStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_FileStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_FileStatus::MergeFrom(const ServiceResponse_FileStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_FileStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_FileStatus::CopyFrom(const ServiceResponse_FileStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_FileStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void ServiceResponse_FileStatus::Swap(ServiceResponse_FileStatus* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    std::swap(login_, other->login_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_FileStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_FileStatus_descriptor_;
  metadata.reflection = ServiceResponse_FileStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_CopyingStatus::kFilesTotalFieldNumber;
const int ServiceResponse_CopyingStatus::kFilesCopiedFieldNumber;
const int ServiceResponse_CopyingStatus::kLoginFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_CopyingStatus::ServiceResponse_CopyingStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_CopyingStatus::InitAsDefaultInstance() {
}

ServiceResponse_CopyingStatus::ServiceResponse_CopyingStatus(const ServiceResponse_CopyingStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_CopyingStatus::SharedCtor() {
  _cached_size_ = 0;
  filestotal_ = 0u;
  filescopied_ = 0u;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_CopyingStatus::~ServiceResponse_CopyingStatus() {
  SharedDtor();
}

void ServiceResponse_CopyingStatus::SharedDtor() {
  if (login_ != &::google::protobuf::internal::kEmptyString) {
    delete login_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResponse_CopyingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_CopyingStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_CopyingStatus_descriptor_;
}

const ServiceResponse_CopyingStatus& ServiceResponse_CopyingStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_CopyingStatus* ServiceResponse_CopyingStatus::default_instance_ = NULL;

ServiceResponse_CopyingStatus* ServiceResponse_CopyingStatus::New() const {
  return new ServiceResponse_CopyingStatus;
}

void ServiceResponse_CopyingStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filestotal_ = 0u;
    filescopied_ = 0u;
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::kEmptyString) {
        login_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_CopyingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 filesTotal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filestotal_)));
          set_has_filestotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filesCopied;
        break;
      }

      // required uint32 filesCopied = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesCopied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filescopied_)));
          set_has_filescopied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional string login = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_CopyingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 filesTotal = 1;
  if (has_filestotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->filestotal(), output);
  }

  // required uint32 filesCopied = 2;
  if (has_filescopied()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->filescopied(), output);
  }

  // optional string login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_CopyingStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 filesTotal = 1;
  if (has_filestotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->filestotal(), target);
  }

  // required uint32 filesCopied = 2;
  if (has_filescopied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->filescopied(), target);
  }

  // optional string login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_CopyingStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 filesTotal = 1;
    if (has_filestotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filestotal());
    }

    // required uint32 filesCopied = 2;
    if (has_filescopied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filescopied());
    }

    // optional string login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_CopyingStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_CopyingStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_CopyingStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_CopyingStatus::MergeFrom(const ServiceResponse_CopyingStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filestotal()) {
      set_filestotal(from.filestotal());
    }
    if (from.has_filescopied()) {
      set_filescopied(from.filescopied());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_CopyingStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_CopyingStatus::CopyFrom(const ServiceResponse_CopyingStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_CopyingStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceResponse_CopyingStatus::Swap(ServiceResponse_CopyingStatus* other) {
  if (other != this) {
    std::swap(filestotal_, other->filestotal_);
    std::swap(filescopied_, other->filescopied_);
    std::swap(login_, other->login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_CopyingStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_CopyingStatus_descriptor_;
  metadata.reflection = ServiceResponse_CopyingStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_MaintenanceStatus::kIsPausedFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_MaintenanceStatus::ServiceResponse_MaintenanceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_MaintenanceStatus::InitAsDefaultInstance() {
}

ServiceResponse_MaintenanceStatus::ServiceResponse_MaintenanceStatus(const ServiceResponse_MaintenanceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_MaintenanceStatus::SharedCtor() {
  _cached_size_ = 0;
  ispaused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_MaintenanceStatus::~ServiceResponse_MaintenanceStatus() {
  SharedDtor();
}

void ServiceResponse_MaintenanceStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceResponse_MaintenanceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_MaintenanceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_MaintenanceStatus_descriptor_;
}

const ServiceResponse_MaintenanceStatus& ServiceResponse_MaintenanceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_MaintenanceStatus* ServiceResponse_MaintenanceStatus::default_instance_ = NULL;

ServiceResponse_MaintenanceStatus* ServiceResponse_MaintenanceStatus::New() const {
  return new ServiceResponse_MaintenanceStatus;
}

void ServiceResponse_MaintenanceStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ispaused_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_MaintenanceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isPaused = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
          set_has_ispaused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_MaintenanceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isPaused = 1;
  if (has_ispaused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispaused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_MaintenanceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isPaused = 1;
  if (has_ispaused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispaused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_MaintenanceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isPaused = 1;
    if (has_ispaused()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_MaintenanceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_MaintenanceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_MaintenanceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_MaintenanceStatus::MergeFrom(const ServiceResponse_MaintenanceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispaused()) {
      set_ispaused(from.ispaused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_MaintenanceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_MaintenanceStatus::CopyFrom(const ServiceResponse_MaintenanceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_MaintenanceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServiceResponse_MaintenanceStatus::Swap(ServiceResponse_MaintenanceStatus* other) {
  if (other != this) {
    std::swap(ispaused_, other->ispaused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_MaintenanceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_MaintenanceStatus_descriptor_;
  metadata.reflection = ServiceResponse_MaintenanceStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_Error::kErrorFieldNumber;
const int ServiceResponse_Error::kMessageFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_Error::ServiceResponse_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_Error::InitAsDefaultInstance() {
}

ServiceResponse_Error::ServiceResponse_Error(const ServiceResponse_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_Error::SharedCtor() {
  _cached_size_ = 0;
  error_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_Error::~ServiceResponse_Error() {
  SharedDtor();
}

void ServiceResponse_Error::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResponse_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_Error_descriptor_;
}

const ServiceResponse_Error& ServiceResponse_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_Error* ServiceResponse_Error::default_instance_ = NULL;

ServiceResponse_Error* ServiceResponse_Error::New() const {
  return new ServiceResponse_Error;
}

void ServiceResponse_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .uploadercontrol.ErrorType error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::ErrorType_IsValid(value)) {
            set_error(static_cast< ::uploadercontrol::ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .uploadercontrol.ErrorType error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .uploadercontrol.ErrorType error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .uploadercontrol.ErrorType error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_Error::MergeFrom(const ServiceResponse_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_Error::CopyFrom(const ServiceResponse_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceResponse_Error::Swap(ServiceResponse_Error* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_Error_descriptor_;
  metadata.reflection = ServiceResponse_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_FileList_Item::kIsFolderFieldNumber;
const int ServiceResponse_FileList_Item::kNameFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_FileList_Item::ServiceResponse_FileList_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_FileList_Item::InitAsDefaultInstance() {
}

ServiceResponse_FileList_Item::ServiceResponse_FileList_Item(const ServiceResponse_FileList_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_FileList_Item::SharedCtor() {
  _cached_size_ = 0;
  isfolder_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_FileList_Item::~ServiceResponse_FileList_Item() {
  SharedDtor();
}

void ServiceResponse_FileList_Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceResponse_FileList_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_FileList_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_FileList_Item_descriptor_;
}

const ServiceResponse_FileList_Item& ServiceResponse_FileList_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_FileList_Item* ServiceResponse_FileList_Item::default_instance_ = NULL;

ServiceResponse_FileList_Item* ServiceResponse_FileList_Item::New() const {
  return new ServiceResponse_FileList_Item;
}

void ServiceResponse_FileList_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfolder_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_FileList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isFolder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfolder_)));
          set_has_isfolder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_FileList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isFolder = 1;
  if (has_isfolder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfolder(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_FileList_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isFolder = 1;
  if (has_isfolder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfolder(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_FileList_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isFolder = 1;
    if (has_isfolder()) {
      total_size += 1 + 1;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_FileList_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_FileList_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_FileList_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_FileList_Item::MergeFrom(const ServiceResponse_FileList_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfolder()) {
      set_isfolder(from.isfolder());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_FileList_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_FileList_Item::CopyFrom(const ServiceResponse_FileList_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_FileList_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServiceResponse_FileList_Item::Swap(ServiceResponse_FileList_Item* other) {
  if (other != this) {
    std::swap(isfolder_, other->isfolder_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_FileList_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_FileList_Item_descriptor_;
  metadata.reflection = ServiceResponse_FileList_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse_FileList::kListFieldNumber;
const int ServiceResponse_FileList::kFolderContentRecursivelyFieldNumber;
#endif  // !_MSC_VER

ServiceResponse_FileList::ServiceResponse_FileList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse_FileList::InitAsDefaultInstance() {
}

ServiceResponse_FileList::ServiceResponse_FileList(const ServiceResponse_FileList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse_FileList::SharedCtor() {
  _cached_size_ = 0;
  foldercontentrecursively_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse_FileList::~ServiceResponse_FileList() {
  SharedDtor();
}

void ServiceResponse_FileList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceResponse_FileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse_FileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_FileList_descriptor_;
}

const ServiceResponse_FileList& ServiceResponse_FileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse_FileList* ServiceResponse_FileList::default_instance_ = NULL;

ServiceResponse_FileList* ServiceResponse_FileList::New() const {
  return new ServiceResponse_FileList;
}

void ServiceResponse_FileList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    foldercontentrecursively_ = false;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse_FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .uploadercontrol.ServiceResponse.FileList.Item list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_folderContentRecursively;
        break;
      }

      // required bool folderContentRecursively = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_folderContentRecursively:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foldercontentrecursively_)));
          set_has_foldercontentrecursively();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse_FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .uploadercontrol.ServiceResponse.FileList.Item list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  // required bool folderContentRecursively = 2;
  if (has_foldercontentrecursively()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->foldercontentrecursively(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse_FileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .uploadercontrol.ServiceResponse.FileList.Item list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  // required bool folderContentRecursively = 2;
  if (has_foldercontentrecursively()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->foldercontentrecursively(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse_FileList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool folderContentRecursively = 2;
    if (has_foldercontentrecursively()) {
      total_size += 1 + 1;
    }

  }
  // repeated .uploadercontrol.ServiceResponse.FileList.Item list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse_FileList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse_FileList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse_FileList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse_FileList::MergeFrom(const ServiceResponse_FileList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_foldercontentrecursively()) {
      set_foldercontentrecursively(from.foldercontentrecursively());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse_FileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse_FileList::CopyFrom(const ServiceResponse_FileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse_FileList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ServiceResponse_FileList::Swap(ServiceResponse_FileList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(foldercontentrecursively_, other->foldercontentrecursively_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse_FileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_FileList_descriptor_;
  metadata.reflection = ServiceResponse_FileList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServiceResponse::kMessageTypeFieldNumber;
const int ServiceResponse::kAuthorizationFieldNumber;
const int ServiceResponse::kFileStatusFieldNumber;
const int ServiceResponse::kCopyingStatusFieldNumber;
const int ServiceResponse::kMaintenanceStatusFieldNumber;
const int ServiceResponse::kErrorFieldNumber;
const int ServiceResponse::kFileListFieldNumber;
#endif  // !_MSC_VER

ServiceResponse::ServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceResponse::InitAsDefaultInstance() {
  authorization_ = const_cast< ::uploadercontrol::ServiceResponse_Authorization*>(&::uploadercontrol::ServiceResponse_Authorization::default_instance());
  filestatus_ = const_cast< ::uploadercontrol::ServiceResponse_FileStatus*>(&::uploadercontrol::ServiceResponse_FileStatus::default_instance());
  copyingstatus_ = const_cast< ::uploadercontrol::ServiceResponse_CopyingStatus*>(&::uploadercontrol::ServiceResponse_CopyingStatus::default_instance());
  maintenancestatus_ = const_cast< ::uploadercontrol::ServiceResponse_MaintenanceStatus*>(&::uploadercontrol::ServiceResponse_MaintenanceStatus::default_instance());
  error_ = const_cast< ::uploadercontrol::ServiceResponse_Error*>(&::uploadercontrol::ServiceResponse_Error::default_instance());
  filelist_ = const_cast< ::uploadercontrol::ServiceResponse_FileList*>(&::uploadercontrol::ServiceResponse_FileList::default_instance());
}

ServiceResponse::ServiceResponse(const ServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceResponse::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 1;
  authorization_ = NULL;
  filestatus_ = NULL;
  copyingstatus_ = NULL;
  maintenancestatus_ = NULL;
  error_ = NULL;
  filelist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceResponse::~ServiceResponse() {
  SharedDtor();
}

void ServiceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete authorization_;
    delete filestatus_;
    delete copyingstatus_;
    delete maintenancestatus_;
    delete error_;
    delete filelist_;
  }
}

void ServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceResponse_descriptor_;
}

const ServiceResponse& ServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remoteclient_2eproto();
  return *default_instance_;
}

ServiceResponse* ServiceResponse::default_instance_ = NULL;

ServiceResponse* ServiceResponse::New() const {
  return new ServiceResponse;
}

void ServiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 1;
    if (has_authorization()) {
      if (authorization_ != NULL) authorization_->::uploadercontrol::ServiceResponse_Authorization::Clear();
    }
    if (has_filestatus()) {
      if (filestatus_ != NULL) filestatus_->::uploadercontrol::ServiceResponse_FileStatus::Clear();
    }
    if (has_copyingstatus()) {
      if (copyingstatus_ != NULL) copyingstatus_->::uploadercontrol::ServiceResponse_CopyingStatus::Clear();
    }
    if (has_maintenancestatus()) {
      if (maintenancestatus_ != NULL) maintenancestatus_->::uploadercontrol::ServiceResponse_MaintenanceStatus::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::uploadercontrol::ServiceResponse_Error::Clear();
    }
    if (has_filelist()) {
      if (filelist_ != NULL) filelist_->::uploadercontrol::ServiceResponse_FileList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .uploadercontrol.ServiceResponse.MessageType messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::uploadercontrol::ServiceResponse_MessageType_IsValid(value)) {
            set_messagetype(static_cast< ::uploadercontrol::ServiceResponse_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authorization;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.Authorization authorization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authorization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authorization()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileStatus;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.FileStatus fileStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filestatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_copyingStatus;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.CopyingStatus copyingStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copyingStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copyingstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_maintenanceStatus;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.MaintenanceStatus maintenanceStatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maintenanceStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maintenancestatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.Error error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fileList;
        break;
      }

      // optional .uploadercontrol.ServiceResponse.FileList fileList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .uploadercontrol.ServiceResponse.MessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .uploadercontrol.ServiceResponse.Authorization authorization = 2;
  if (has_authorization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->authorization(), output);
  }

  // optional .uploadercontrol.ServiceResponse.FileStatus fileStatus = 3;
  if (has_filestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filestatus(), output);
  }

  // optional .uploadercontrol.ServiceResponse.CopyingStatus copyingStatus = 4;
  if (has_copyingstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->copyingstatus(), output);
  }

  // optional .uploadercontrol.ServiceResponse.MaintenanceStatus maintenanceStatus = 5;
  if (has_maintenancestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->maintenancestatus(), output);
  }

  // optional .uploadercontrol.ServiceResponse.Error error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->error(), output);
  }

  // optional .uploadercontrol.ServiceResponse.FileList fileList = 7;
  if (has_filelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->filelist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .uploadercontrol.ServiceResponse.MessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional .uploadercontrol.ServiceResponse.Authorization authorization = 2;
  if (has_authorization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->authorization(), target);
  }

  // optional .uploadercontrol.ServiceResponse.FileStatus fileStatus = 3;
  if (has_filestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filestatus(), target);
  }

  // optional .uploadercontrol.ServiceResponse.CopyingStatus copyingStatus = 4;
  if (has_copyingstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->copyingstatus(), target);
  }

  // optional .uploadercontrol.ServiceResponse.MaintenanceStatus maintenanceStatus = 5;
  if (has_maintenancestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->maintenancestatus(), target);
  }

  // optional .uploadercontrol.ServiceResponse.Error error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->error(), target);
  }

  // optional .uploadercontrol.ServiceResponse.FileList fileList = 7;
  if (has_filelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->filelist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .uploadercontrol.ServiceResponse.MessageType messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // optional .uploadercontrol.ServiceResponse.Authorization authorization = 2;
    if (has_authorization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authorization());
    }

    // optional .uploadercontrol.ServiceResponse.FileStatus fileStatus = 3;
    if (has_filestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filestatus());
    }

    // optional .uploadercontrol.ServiceResponse.CopyingStatus copyingStatus = 4;
    if (has_copyingstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copyingstatus());
    }

    // optional .uploadercontrol.ServiceResponse.MaintenanceStatus maintenanceStatus = 5;
    if (has_maintenancestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maintenancestatus());
    }

    // optional .uploadercontrol.ServiceResponse.Error error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional .uploadercontrol.ServiceResponse.FileList fileList = 7;
    if (has_filelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filelist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceResponse::MergeFrom(const ServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_authorization()) {
      mutable_authorization()->::uploadercontrol::ServiceResponse_Authorization::MergeFrom(from.authorization());
    }
    if (from.has_filestatus()) {
      mutable_filestatus()->::uploadercontrol::ServiceResponse_FileStatus::MergeFrom(from.filestatus());
    }
    if (from.has_copyingstatus()) {
      mutable_copyingstatus()->::uploadercontrol::ServiceResponse_CopyingStatus::MergeFrom(from.copyingstatus());
    }
    if (from.has_maintenancestatus()) {
      mutable_maintenancestatus()->::uploadercontrol::ServiceResponse_MaintenanceStatus::MergeFrom(from.maintenancestatus());
    }
    if (from.has_error()) {
      mutable_error()->::uploadercontrol::ServiceResponse_Error::MergeFrom(from.error());
    }
    if (from.has_filelist()) {
      mutable_filelist()->::uploadercontrol::ServiceResponse_FileList::MergeFrom(from.filelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse::CopyFrom(const ServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_authorization()) {
    if (!this->authorization().IsInitialized()) return false;
  }
  if (has_filestatus()) {
    if (!this->filestatus().IsInitialized()) return false;
  }
  if (has_copyingstatus()) {
    if (!this->copyingstatus().IsInitialized()) return false;
  }
  if (has_maintenancestatus()) {
    if (!this->maintenancestatus().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_filelist()) {
    if (!this->filelist().IsInitialized()) return false;
  }
  return true;
}

void ServiceResponse::Swap(ServiceResponse* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(authorization_, other->authorization_);
    std::swap(filestatus_, other->filestatus_);
    std::swap(copyingstatus_, other->copyingstatus_);
    std::swap(maintenancestatus_, other->maintenancestatus_);
    std::swap(error_, other->error_);
    std::swap(filelist_, other->filelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceResponse_descriptor_;
  metadata.reflection = ServiceResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace uploadercontrol

// @@protoc_insertion_point(global_scope)
